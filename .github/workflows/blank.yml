name: Cosmos DB Emulator Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test_emulator:
    runs-on: ubuntu-latest

    steps:
      # Print machine information
      - name: Print Machine Information
        run: |
          echo "CPU Information:"
          lscpu

          echo "Memory Information:"
          free -h

          echo "Disk Usage:"
          df -h

          echo "Operating System Information:"
          uname -a

          echo "Network Configuration:"
          ip addr show

          echo "Docker Version:"
          docker --version

          echo "Docker Info:"
          docker info

      # Check out code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azure-cosmos
        
      # Run Cosmos DB Emulator and Test
      - name: Run Emulator and Test
        id: run_emulator
        run: |
          set -e
          MAX_RETRIES=5
          SUCCESS=false
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt #$i"

            docker run \
              --publish 8081:8081 \
              --publish 10250-10255:10250-10255 \
              --detach \
              --name=test-linux-emulator-tty-$i \
              --interactive \
              --tty \
              mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator

            echo "Getting Emulator Logs"
            docker logs test-linux-emulator-tty-$i

            MAX_RETRIES=5
            SUCCESS=false

            echo "Checking if https://localhost:8081/_explorer/emulator.pem is accessible"
            for ((j=1; j<=MAX_RETRIES; j++)); do
              if curl --silent --fail -k https://localhost:8081/_explorer/emulator.pem; then
                echo "Emulator responded successfully."
                SUCCESS=true
                break
              else
                echo "Emulator failed to respond on attempt #$j." >&2
                echo "Retrying..."
                sleep 5
              fi
            done

            if [ "$SUCCESS" = false ]; then
              echo "Emulator failed to start after $MAX_RETRIES attempts." >&2
              echo "::error::Emulator failed to start after $MAX_RETRIES attempts."
              exit 1
            else
              docker logs test-linux-emulator-tty-$i
              break
            fi
          done

      # Download and install Cosmos DB emulator certificate
      - name: Download and install Cosmos DB emulator certificate
        if: steps.run_emulator.outcome == 'success'
        run: |
          # Download the emulator certificate
          curl -k https://localhost:8081/_explorer/emulator.pem > ~/emulatorcert.crt
          
          # Install the emulator certificate
          sudo cp ~/emulatorcert.crt /usr/local/share/ca-certificates/
          sudo update-ca-certificates

          # Verify the installation
          ls -l /usr/local/share/ca-certificates/emulatorcert.crt
          ls -l /etc/ssl/certs/emulatorcert.pem

          PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')

          if [ -z "$PYTHON_VERSION" ]; then
            echo "Python is not installed."
            exit 1
          fi
          
          CERTIFI_PATH="/opt/hostedtoolcache/Python/${PYTHON_VERSION}/x64/lib/python${PYTHON_VERSION}/site-packages/certifi/cacert.pem"
          
          # Append cert to python ca bundle
          sudo echo >> /opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/certifi/cacert.pem
          sudo cat /usr/local/share/ca-certificates/emulatorcert.crt >> /opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/certifi/cacert.pem

      # Test Emulator with Python script
      - name: Test Emulator with Python script
        if: steps.run_emulator.outcome == 'success'
        run: |
          echo "Testing Emulator Endpoint with Python script"
          python testEmulator.py

      # Clean up
      - name: Clean up
        if: steps.run_emulator.outcome == 'success'
        run: |
          echo "Cleaning up"
          docker rm -f test-linux-emulator-tty-$i || true  # Ensure cleanup even in failure
