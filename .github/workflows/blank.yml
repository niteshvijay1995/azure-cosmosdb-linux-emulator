name: Cosmos DB Emulator Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  test_emulator:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            python-path: /opt/hostedtoolcache/Python/3.12.3/x64
          - os: macos-latest
            python-path: /usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9
          - os: windows-latest
            python-path: C:\\hostedtoolcache\\windows\\Python\\3.9.1\\x64

    steps:
      # Print machine information
      - name: Print Machine Information
        run: |
          echo "CPU Information:"
          echo "$(uname -a)"

          echo "Memory Information:"
          case "$(uname -s)" in
            Linux*) free -h ;;
            Darwin*) vm_stat ;;
            CYGWIN*|MINGW*|MSYS*|MINGW64*) systeminfo | findstr /C:"Total Physical Memory" ;;
          esac

          echo "Disk Usage:"
          df -h

          echo "Operating System Information:"
          uname -a

          echo "Network Configuration:"
          case "$(uname -s)" in
            Linux*) ip addr show ;;
            Darwin*) ifconfig ;;
            CYGWIN*|MINGW*|MSYS*|MINGW64*) ipconfig ;;
          esac

          echo "Docker Version:"
          docker --version

          echo "Docker Info:"
          docker info

      # Check out code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azure-cosmos

      # Run Cosmos DB Emulator and Test
      - name: Run Emulator and Test
        id: run_emulator
        run: |
          set -e
          MAX_RETRIES=5
          SUCCESS=false
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt #$i"

            docker run \
              --publish 8081:8081 \
              --publish 10250-10255:10250-10255 \
              --detach \
              --name=test-${{ matrix.os }}-emulator-tty-$i \
              --interactive \
              --tty \
              mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest

            echo "Waiting for Emulator to Start"
            sleep 90  # Increased startup timeout

            echo "Getting Emulator Logs"
            docker logs test-${{ matrix.os }}-emulator-tty-$i

            echo "Checking Emulator Logs for 'Started' Keyword"
            if docker logs test-${{ matrix.os }}-emulator-tty-$i | grep -q "Started"; then
              echo "Emulator started successfully."
              SUCCESS=true
              break
            else
              echo "Emulator failed to start on attempt #$i." >&2
              docker rm -f test-${{ matrix.os }}-emulator-tty-$i || true  # Ensure cleanup even in failure
              echo "Retrying..."
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "Emulator failed to start after $MAX_RETRIES attempts." >&2
            echo "::error::Emulator failed to start after $MAX_RETRIES attempts."
            exit 1
          fi

      # Download and install Cosmos DB emulator certificate
      - name: Download and install Cosmos DB emulator certificate
        if: steps.run_emulator.outcome == 'success'
        run: |
          # Download the emulator certificate
          curl -k https://localhost:8081/_explorer/emulator.pem > ~/emulatorcert.crt
          
          # Install the emulator certificate
          case "$(uname -s)" in
            Linux*) 
              sudo cp ~/emulatorcert.crt /usr/local/share/ca-certificates/
              sudo update-ca-certificates
              sudo echo >> ${{ matrix.python-path }}/lib/python3.12/site-packages/certifi/cacert.pem
              sudo cat /usr/local/share/ca-certificates/emulatorcert.crt >> ${{ matrix.python-path }}/lib/python3.12/site-packages/certifi/cacert.pem
              ;;
            Darwin*) 
              sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ~/emulatorcert.crt
              sudo echo >> ${{ matrix.python-path }}/lib/python3.9/site-packages/certifi/cacert.pem
              sudo cat ~/emulatorcert.crt >> ${{ matrix.python-path }}/lib/python3.9/site-packages/certifi/cacert.pem
              ;;
            CYGWIN*|MINGW*|MSYS*|MINGW64*) 
              certutil -addstore -f "ROOT" ~/emulatorcert.crt
              ;;
          esac

          # Verify the installation
          case "$(uname -s)" in
            Linux*) 
              ls -l /usr/local/share/ca-certificates/emulatorcert.crt
              ls -l /etc/ssl/certs/emulatorcert.pem
              ;;
            Darwin*) 
              sudo security find-certificate -c "localhost" /Library/Keychains/System.keychain
              ;;
            CYGWIN*|MINGW*|MSYS*|MINGW64*) 
              certutil -store "ROOT" | findstr "localhost"
              ;;
          esac

      # Test Emulator with Python script
      - name: Test Emulator with Python script
        if: steps.run_emulator.outcome == 'success'
        run: |
          echo "Testing Emulator Endpoint with Python script"
          python testEmulator.py

      # Clean up
      - name: Clean up
        if: steps.run_emulator.outcome == 'success'
        run: |
          echo "Cleaning up"
          docker rm -f test-${{ matrix.os }}-emulator-tty-$i || true  # Ensure cleanup even in failure
